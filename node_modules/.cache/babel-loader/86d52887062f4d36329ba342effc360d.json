{"ast":null,"code":"var _jsxFileName = \"/Users/anne/Documents/Dev/project/to-do-list/src/Todolist.js\";\n// import logo from './logo.svg';\n// 全局css 引入方法，容易污染全局，谨慎使用\nimport './App.css'; // 新版函数组件方法：现在用的是函数组件\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       hello world\n//     </div>\n//   );\n// }\n// 类组件方法\n\nimport React, { Component, Fragment } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TodoList extends Component {\n  // 最优先被执行的函数，接受props参数\n  constructor(props) {\n    // 调用父类构造函数\n    super(props); // 定义数据：\n\n    this.state = {\n      inputValue: 'asdfasdf',\n      list: ['learn react', 'learn JS', 'learn TypeScript']\n    };\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // return（）里面的JSX，外层必须有一个包裹元素.但是又不想他显示，用哪Fragment占位符，类似vue template\n      _jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: this.state.inputValue // input value state里的数据\n          // 用bind因为bind不会立即执行函数，而call和apply会在没有点击的时候就执行这个函数。\n          // 为什么这个正是绑定是undefined呢？\n          ,\n          onChange: this.handleInputChange.bind(this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleBtnClick,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: this.state.list.map((item, index) => {\n            return /*#__PURE__*/_jsxDEV(\"li\", {\n              children: item\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 20\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n  handleInputChange(e) {\n    // 1.e.target指向\n    // e.target is input dom 元素\n    // 2.函数的this指向\n    // 会报错：this.state未被定义。此时this不指向class，而是undefined。\n    // 为何是undefined：https://zhuanlan.zhihu.com/p/37911534\n    // React 为严格模式，那么没有显式的使用调用者的情况下，this 不会自动绑定到全局对象上。handleClick 函数实际上会作为回调函数，传入 addEventListener() ，此时并没有被显示调用。这就是为什么你在 React 的组件中添加事件处理函数为什么会得到 undefnied 而不是全局对象或者别的什么东西。\n    // 需要再绑定此方法时候用bind()改变this的指向为原class\n    // this.state.inputValue = e.target.value;\n    // 3.setState()方法改变state数据\n    this.setState({\n      inputValue: e.target.value\n    });\n  }\n\n  handleBtnClick() {} // 在类内部直接使用类方法：this.handleInputChange为什么不行\n\n\n}\n\nexport default TodoList;","map":{"version":3,"sources":["/Users/anne/Documents/Dev/project/to-do-list/src/Todolist.js"],"names":["React","Component","Fragment","TodoList","constructor","props","state","inputValue","list","render","handleInputChange","bind","handleBtnClick","map","item","index","e","setState","target","value"],"mappings":";AAAA;AAEA;AACA,OAAO,WAAP,C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;;AAEA,MAAMC,QAAN,SAAuBF,SAAvB,CAAiC;AAC/B;AACAG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB;AACA,UAAMA,KAAN,EAFiB,CAGjB;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,UADD;AAEXC,MAAAA,IAAI,EAAE,CAAC,aAAD,EAAgB,UAAhB,EAA4B,kBAA5B;AAFK,KAAb;AAID;;AAEDC,EAAAA,MAAM,GAAG;AACP;AAAA;AACE;AACA,cAAC,QAAD;AAAA,gCAEE;AACE,UAAA,KAAK,EAAE,KAAKH,KAAL,CAAWC,UADpB,CAEE;AACA;AACA;AAJF;AAKE,UAAA,QAAQ,EAAE,KAAKG,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B;AALZ;AAAA;AAAA;AAAA;AAAA,gBAFF,eASE;AAAQ,UAAA,OAAO,EAAE,KAAKC,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF,eAUE;AAAA,oBACG,KAAKN,KAAL,CAAWE,IAAX,CAAgBK,GAAhB,CAAoB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACpC,gCAAO;AAAA,wBAAKD;AAAL;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD,WAFA;AADH;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAmBD;;AACDJ,EAAAA,iBAAiB,CAACM,CAAD,EAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAKC,QAAL,CAAc;AAAEV,MAAAA,UAAU,EAAES,CAAC,CAACE,MAAF,CAASC;AAAvB,KAAd;AACD;;AACDP,EAAAA,cAAc,GAAG,CAAE,CA7CY,CA+C/B;;;AA/C+B;;AAkDjC,eAAeT,QAAf","sourcesContent":["// import logo from './logo.svg';\n\n// 全局css 引入方法，容易污染全局，谨慎使用\nimport './App.css';\n\n// 新版函数组件方法：现在用的是函数组件\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       hello world\n//     </div>\n//   );\n// }\n\n// 类组件方法\nimport React, { Component, Fragment } from 'react';\n\nclass TodoList extends Component {\n  // 最优先被执行的函数，接受props参数\n  constructor(props) {\n    // 调用父类构造函数\n    super(props);\n    // 定义数据：\n    this.state = {\n      inputValue: 'asdfasdf',\n      list: ['learn react', 'learn JS', 'learn TypeScript'],\n    };\n  }\n\n  render() {\n    return (\n      // return（）里面的JSX，外层必须有一个包裹元素.但是又不想他显示，用哪Fragment占位符，类似vue template\n      <Fragment>\n        {/* 绑定状态的数据 */}\n        <input\n          value={this.state.inputValue}\n          // input value state里的数据\n          // 用bind因为bind不会立即执行函数，而call和apply会在没有点击的时候就执行这个函数。\n          // 为什么这个正是绑定是undefined呢？\n          onChange={this.handleInputChange.bind(this)}\n        ></input>\n        <button onClick={this.handleBtnClick}>Submit</button>\n        <ul>\n          {this.state.list.map((item, index) => {\n            return <li>{item}</li>;\n          })}\n        </ul>\n      </Fragment>\n    );\n  }\n  handleInputChange(e) {\n    // 1.e.target指向\n    // e.target is input dom 元素\n    // 2.函数的this指向\n    // 会报错：this.state未被定义。此时this不指向class，而是undefined。\n    // 为何是undefined：https://zhuanlan.zhihu.com/p/37911534\n    // React 为严格模式，那么没有显式的使用调用者的情况下，this 不会自动绑定到全局对象上。handleClick 函数实际上会作为回调函数，传入 addEventListener() ，此时并没有被显示调用。这就是为什么你在 React 的组件中添加事件处理函数为什么会得到 undefnied 而不是全局对象或者别的什么东西。\n    // 需要再绑定此方法时候用bind()改变this的指向为原class\n    // this.state.inputValue = e.target.value;\n    // 3.setState()方法改变state数据\n    this.setState({ inputValue: e.target.value });\n  }\n  handleBtnClick() {}\n\n  // 在类内部直接使用类方法：this.handleInputChange为什么不行\n}\n\nexport default TodoList;\n"]},"metadata":{},"sourceType":"module"}