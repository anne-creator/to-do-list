{"ast":null,"code":"var _jsxFileName = \"/Users/anne/Documents/Dev/x-mind note/React/React\\u7B14\\u8BB0\\u793A\\u8303\\u4EE3\\u7801/to-do-list/src/Todolist.js\";\n// Todolist: input框与数据绑定事件，add button功能，\n// 全局css 引入方法，容易污染全局，谨慎使用\n// 新版函数组件方法：现在用的是函数组件\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       hello world\n//     </div>\n//   );\n// }\n// 类组件方法\nimport React, { Component, Fragment } from 'react';\nimport TodoItem from './TodoItem'; // 样式放在所有组件的最后面\n\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TodoList extends Component {\n  // 最优先被执行的函数，接受props参数\n  constructor(props) {\n    // 调用父类构造函数\n    super(props); // 定义数据：\n\n    this.state = {\n      inputValue: '',\n      list: ['learn react', 'learn JS', 'learn TypeScript']\n    }; // 把绑定统一放在constructor里面的，优化性能\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleBtnClick = this.handleBtnClick.bind(this);\n    this.handleItemDelete = this.handleItemDelete.bind(this);\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      // return（）里面的JSX，外层必须有一个包裹元素.但是又不想他显示，用哪Fragment占位符，类似vue template\n      _jsxDEV(Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: this.state.inputValue // input value state里的数据\n          // 用bind因为bind不会立即执行函数，而call和apply会在没有点击的时候就执行这个函数。\n          // 为什么这个正是绑定是undefined呢？\n          ,\n          onChange: this.handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleBtnClick,\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: this.getTodoItem.this(bind)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this)\n    );\n  }\n\n  handleInputChange(e) {\n    // 【1.e.target指向\n    // e.target is input dom 元素\n    // 【2.函数的this指向\n    // 会报错：this.state未被定义。此时this不指向class，而是undefined。\n    // 为何是undefined：https://zhuanlan.zhihu.com/p/37911534\n    // React 为严格模式，那么没有显式的使用调用者的情况下，this 不会自动绑定到全局对象上。handleClick 函数实际上会作为回调函数，传入 addEventListener() ，此时并没有被显示调用。这就是为什么你在 React 的组件中添加事件处理函数为什么会得到 undefnied 而不是全局对象或者别的什么东西。\n    // 需要再绑定此方法时候用bind()改变this的指向为原class\n    // this.state.inputValue = e.target.value;\n    // 【3.setState()方法改变state数据\n    this.setState({\n      inputValue: e.target.value\n    });\n  }\n\n  getTodoItem() {\n    return this.state.list.map((item, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(TodoItem, {\n          content: item,\n          index: index // 传递给子组件的方法的this必须指向父组件\n          ,\n          deleteItem: this.handleItemDelete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this);\n    });\n  }\n\n  handleBtnClick() {\n    // ...展开运算符：把以前内容全部展开，生成新的数组\n    this.setState({\n      list: [...this.state.list, this.state.inputValue],\n      inputValue: ''\n    });\n  }\n\n  handleItemDelete(index) {\n    // copy list 给一个新数组\n    const list = [...this.state.list]; // 不推荐直接在list上splice，再用setState，因为list有一个immutable的概念\n    // state 不要直接修改statede 内容，影响后面性能优化\n\n    list.splice(index, 1);\n    this.setState({\n      list: list\n    });\n  } // 【？？？】如何在类内部直接使用类方法：this.handleInputChange为什么不行\n\n\n}\n\nexport default TodoList;","map":{"version":3,"sources":["/Users/anne/Documents/Dev/x-mind note/React/React笔记示范代码/to-do-list/src/Todolist.js"],"names":["React","Component","Fragment","TodoItem","TodoList","constructor","props","state","inputValue","list","handleInputChange","bind","handleBtnClick","handleItemDelete","render","getTodoItem","this","e","setState","target","value","map","item","index","splice"],"mappings":";AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CACA;;AACA,OAAO,WAAP;;;AAEA,MAAMC,QAAN,SAAuBH,SAAvB,CAAiC;AAC/B;AACAI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB;AACA,UAAMA,KAAN,EAFiB,CAGjB;;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,UAAU,EAAE,EADD;AAEXC,MAAAA,IAAI,EAAE,CAAC,aAAD,EAAgB,UAAhB,EAA4B,kBAA5B;AAFK,KAAb,CAJiB,CAQjB;;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKC,cAAL,GAAsB,KAAKA,cAAL,CAAoBD,IAApB,CAAyB,IAAzB,CAAtB;AACA,SAAKE,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBF,IAAtB,CAA2B,IAA3B,CAAxB;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACP;AAAA;AACE;AACA,cAAC,QAAD;AAAA,gCAEE;AACE,UAAA,KAAK,EAAE,KAAKP,KAAL,CAAWC,UADpB,CAEE;AACA;AACA;AAJF;AAKE,UAAA,QAAQ,EAAE,KAAKE;AALjB;AAAA;AAAA;AAAA;AAAA,gBAFF,eASE;AAAQ,UAAA,OAAO,EAAE,KAAKE,cAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBATF,eAUE;AAAA,oBAEG,KAAKG,WAAL,CAAiBC,IAAjB,CAAsBL,IAAtB;AAFH;AAAA;AAAA;AAAA;AAAA,gBAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAFF;AAkBD;;AACDD,EAAAA,iBAAiB,CAACO,CAAD,EAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAKC,QAAL,CAAc;AAAEV,MAAAA,UAAU,EAAES,CAAC,CAACE,MAAF,CAASC;AAAvB,KAAd;AACD;;AACDL,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAKR,KAAL,CAAWE,IAAX,CAAgBY,GAAhB,CAAoB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC1C,0BACE;AAAA,+BAIE,QAAC,QAAD;AACE,UAAA,OAAO,EAAED,IADX;AAEE,UAAA,KAAK,EAAEC,KAFT,CAGE;AAHF;AAIE,UAAA,UAAU,EAAE,KAAKV;AAJnB;AAAA;AAAA;AAAA;AAAA;AAJF;AAAA;AAAA;AAAA;AAAA,cADF;AAaD,KAdM,CAAP;AAeD;;AACDD,EAAAA,cAAc,GAAG;AACf;AACA,SAAKM,QAAL,CAAc;AACZT,MAAAA,IAAI,EAAE,CAAC,GAAG,KAAKF,KAAL,CAAWE,IAAf,EAAqB,KAAKF,KAAL,CAAWC,UAAhC,CADM;AAEZA,MAAAA,UAAU,EAAE;AAFA,KAAd;AAID;;AACDK,EAAAA,gBAAgB,CAACU,KAAD,EAAQ;AACtB;AACA,UAAMd,IAAI,GAAG,CAAC,GAAG,KAAKF,KAAL,CAAWE,IAAf,CAAb,CAFsB,CAGtB;AACA;;AACAA,IAAAA,IAAI,CAACe,MAAL,CAAYD,KAAZ,EAAmB,CAAnB;AACA,SAAKL,QAAL,CAAc;AAAET,MAAAA,IAAI,EAAEA;AAAR,KAAd;AACD,GA/E8B,CAgF/B;;;AAhF+B;;AAmFjC,eAAeL,QAAf","sourcesContent":["// Todolist: input框与数据绑定事件，add button功能，\n\n// 全局css 引入方法，容易污染全局，谨慎使用\n\n// 新版函数组件方法：现在用的是函数组件\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       hello world\n//     </div>\n//   );\n// }\n\n// 类组件方法\nimport React, { Component, Fragment } from 'react';\nimport TodoItem from './TodoItem';\n// 样式放在所有组件的最后面\nimport './App.css';\n\nclass TodoList extends Component {\n  // 最优先被执行的函数，接受props参数\n  constructor(props) {\n    // 调用父类构造函数\n    super(props);\n    // 定义数据：\n    this.state = {\n      inputValue: '',\n      list: ['learn react', 'learn JS', 'learn TypeScript'],\n    };\n    // 把绑定统一放在constructor里面的，优化性能\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleBtnClick = this.handleBtnClick.bind(this);\n    this.handleItemDelete = this.handleItemDelete.bind(this);\n  }\n\n  render() {\n    return (\n      // return（）里面的JSX，外层必须有一个包裹元素.但是又不想他显示，用哪Fragment占位符，类似vue template\n      <Fragment>\n        {/* 绑定状态的数据 */}\n        <input\n          value={this.state.inputValue}\n          // input value state里的数据\n          // 用bind因为bind不会立即执行函数，而call和apply会在没有点击的时候就执行这个函数。\n          // 为什么这个正是绑定是undefined呢？\n          onChange={this.handleInputChange}\n        ></input>\n        <button onClick={this.handleBtnClick}>Submit</button>\n        <ul>\n          {/* 渲染的时候，需要array里面的每一项增加key值,实际编程最好不要*/}\n          {this.getTodoItem.this(bind)}\n        </ul>\n      </Fragment>\n    );\n  }\n  handleInputChange(e) {\n    // 【1.e.target指向\n    // e.target is input dom 元素\n    // 【2.函数的this指向\n    // 会报错：this.state未被定义。此时this不指向class，而是undefined。\n    // 为何是undefined：https://zhuanlan.zhihu.com/p/37911534\n    // React 为严格模式，那么没有显式的使用调用者的情况下，this 不会自动绑定到全局对象上。handleClick 函数实际上会作为回调函数，传入 addEventListener() ，此时并没有被显示调用。这就是为什么你在 React 的组件中添加事件处理函数为什么会得到 undefnied 而不是全局对象或者别的什么东西。\n    // 需要再绑定此方法时候用bind()改变this的指向为原class\n    // this.state.inputValue = e.target.value;\n    // 【3.setState()方法改变state数据\n    this.setState({ inputValue: e.target.value });\n  }\n  getTodoItem() {\n    return this.state.list.map((item, index) => {\n      return (\n        <div>\n          {/* // 传递参数：bind多传递一个index下标值 \n        // 【？？？】什么时候{},{{}}\n        // 需要往TodoItem里面传入item和index的值 */}\n          <TodoItem\n            content={item}\n            index={index}\n            // 传递给子组件的方法的this必须指向父组件\n            deleteItem={this.handleItemDelete}\n          />\n        </div>\n      );\n    });\n  }\n  handleBtnClick() {\n    // ...展开运算符：把以前内容全部展开，生成新的数组\n    this.setState({\n      list: [...this.state.list, this.state.inputValue],\n      inputValue: '',\n    });\n  }\n  handleItemDelete(index) {\n    // copy list 给一个新数组\n    const list = [...this.state.list];\n    // 不推荐直接在list上splice，再用setState，因为list有一个immutable的概念\n    // state 不要直接修改statede 内容，影响后面性能优化\n    list.splice(index, 1);\n    this.setState({ list: list });\n  }\n  // 【？？？】如何在类内部直接使用类方法：this.handleInputChange为什么不行\n}\n\nexport default TodoList;\n"]},"metadata":{},"sourceType":"module"}